{"version":3,"file":"browser.js","sources":["../coroutines.ts"],"sourcesContent":["\n/**\n * A container for running coroutines.\n * \n * @remarks this might be renamed \"Timeline\" in the future  \n * \n */\nexport class Coroutines {\n    private coroutines : Iterator<any>[] = []\n    \n    /**\n     * Set to `false` to exit a [[startTicking]] loop\n     */\n    public active = true\n\n    /**\n     * For debugging\n     */\n    public readonly name : string;\n    \n    constructor(name = generateNewName()) {\n        this.name = name;\n    }\n\n    /**\n     * Schedules a coroutine for evaluation.\n     * \n     * Future calls to [[tick]] will run `coro` up to its next `yield` until it is completed.\n     * \n     * As a convenience if `coro` is a generator function and not a generator, it will be evaluated to produce a generator.\n     * \n     * ```js\n     * function* coroutineFunction() { ... }\n     * let coro = new Coroutines()\n     * coro.start(coroutineFunction()) // this works\n     * coro.start(coroutineFunction)   // so does this\n     * ```\n     * \n     * @param coro coroutine to start\n     */\n    public start(coro:Iterator<any>|(()=>Iterator<any>)) {\n        let c = \"next\" in coro ? coro : coro();\n        this.coroutines.push(c)\n        return c\n    }\n\n    /**\n     * Stops a single coroutine\n     * \n     * @param coro coroutine to stop\n     */\n    public stop(coro: Iterator<any>) {\n        this.coroutines.splice(this.coroutines.indexOf(coro), 1)\n    }\n\n    /**\n     * Discards all scheduled coroutines\n     */\n    public stopAll() {\n        this.coroutines = []\n    }\n\n    /**\n     * Runs all scheduled coroutines once.\n     * \n     * Each coroutine added with [[start]] will run up to its next `yield` statement. Finished coroutines are removed\n     * from the collection.\n     */\n    public tick() {\n        let toRemove = []\n        for(const coro of this.coroutines) {\n            let result = coro.next()\n            if(result.done) {\n                toRemove.push(coro)\n            }\n      }\n      for (const x of toRemove) {\n        this.coroutines.splice(this.coroutines.indexOf(x), 1)\n      }\n    }\n\n    /**\n     * Start running coroutines every frame.\n     * \n     * Calls [[tick]] every \"frame\" as long as [[active]] is true.\n     * \n     * The meaning of \"a frame\" depends on the scheduling function. In a browser, requestAnimationFrame is the default \n     * and a frame happens every 1/60 seconds or 16.6ms or 60Hz. In node, process.nextTick is the default and a frame\n     * happens every iteration of the event loop, which is typically much faster than 1/60 seconds. Coroutines that\n     * measure physical time are not affected by this difference.\n     * \n     * @param scheduleFunction defaults to\n     * [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)\n     * in a browser and [setImmediate](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate) otherwise.\n     */\n    public startTicking(scheduleFunction:Function=_scheduleFunction) {\n        let runCoroutines = () => {\n            this.tick()\n            if(this.active)\n                scheduleFunction(runCoroutines)\n        }\n        runCoroutines()\n    }\n}\n\nlet generateNewName = () => Math.random().toString(36).replace(\"0.\", \"Coroutines.\")\n\nlet _scheduleFunction = typeof window === \"undefined\" ? setImmediate : requestAnimationFrame\n\nif(typeof window === \"undefined\") {\n    global[\"performance\"] = require(\"perf_hooks\").performance;\n}\n\nlet _clock = () => performance.now() / 1000\n\n/**\n * Sets a new clock function.\n * \n * The clock function returns the elapsed application time in seconds. It is called by some coroutines to measure the\n * passage of time. defaults to `performance.now() / 1000`\n *\n * @param f New clock function\n */\nexport function setClock(f: () => number) {\n    _clock = f\n}\n\n/**\n * Wait for a number of seconds.\n * \n * @category Coroutine\n * \n * @param seconds How many seconds to wait\n * @param clock A function that returns the elapsed application time in seconds, defaults to the function assigned by [[setClock]]\n * @see [[setClock]]\n */\nexport function* wait(seconds: number, clock = _clock) {\n    let startTime = clock()\n    while (clock() - startTime < seconds) {\n        yield;\n    }\n}\n\n/**\n * Wait for a number of frames.\n * \n * @category Coroutine\n * \n * @param n How many frames to wait\n */\nexport function* waitFrames(n: number) {\n    while (n-- > 0) {\n        yield;\n    }\n}\n\n/**\n * Wait until a function `f` returns true.\n * \n * @category Coroutine\n * \n * @param f A function to execute every frame. When `f` returns truthy this coroutine completes.\n */\nexport function* waitUntil(f: () => boolean) {\n    while(!f()) {\n        yield;\n    }\n}\n\n/**\n * Wait while a function `f` returns true.\n * \n * @category Coroutine\n * \n * @param f A function to execute every frame. When `f` returns falsey this coroutine completes.\n */\nexport function* waitWhile(f: () => boolean) {\n    while(f()) {\n        yield;\n    }\n}\n\n/**\n * Animate a parameter.\n * \n * @category Coroutine\n * \n * \n * @param obj The object to mutate\n * @param prop The property on `obj` to mutate\n * @param to The final value of `obj.prop`\n * @param map A function to shape the animation curve. Given a value between 0 and 1 returns a value between 0 and 1. Defaults to the identity function (no shaping).\n * @param map.x A value between 0 and 1\n * @param clock The clock function used to measure time. Defaults to the function set by [[setClock]]\n * @param interpolate Interpolating function. Given values `a` and `b` returns their interpolated value at `t`, a number between 0 and 1. Defaults to linear interpolation.\n * @param interpolate.a The starting value\n * @param interpolate.b The final value\n * @param interpolate.t The interpolation value, a number between 0 and 1\n * @todo needs way to specify animation speed or time\n * @see [[setClock]]\n */\nexport function* animate(obj: any, prop: string, to:any, { clock = _clock, map = (x:number) => x, interpolate = (a:any, b:any, t:number) => b * t + a * (1 - t) } ) {\n    let from = obj[prop];\n    let t = 0\n    let lastTime = clock()\n    while(t < 1) {\n        let nowTime = clock()\n        let delta = nowTime - lastTime\n        lastTime = nowTime\n        obj[prop] = interpolate(from, to, map(t))\n        t += delta\n        yield;\n    }\n}"],"names":[],"mappings":"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"}